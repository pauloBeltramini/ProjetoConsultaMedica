/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import data.ConsultaData;
import data.MedicoData;
import data.PacienteData;
import extras.TratarFormularios;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Consulta;
import model.Medico;
import model.Paciente;

/**
 *
 * @author Paulo
 */
public class JIFConsulta extends javax.swing.JInternalFrame {
    private Consulta obj;
    private ConsultaData DAO;
    private int acao = 0;
    private ArrayList<Consulta> listaDeConsultas;
    
    private PacienteData DAOPaciente;
    private ArrayList<Paciente> listaDePacientes;
    
    private MedicoData DAOMedico;
    private ArrayList<Medico> listaDeMedicos;
    /**
     * Creates new form JIFConsulta
     */
    public JIFConsulta() {
        try {
            initComponents();
            obj = new Consulta();
            DAO = new ConsultaData();
            listaDeConsultas = new ArrayList<>();
            
            DAOPaciente = new PacienteData();
            listaDePacientes = new ArrayList<>();
            listaDePacientes = DAOPaciente.carregarCombo();
            jcbPaciente.removeAllItems();
            jcbPaciente.addItem("Selecione o paciente");
            for (Paciente p: listaDePacientes) {
                jcbPaciente.addItem(p.getNomePaciente());
            }
            
            DAOMedico = new MedicoData();
            listaDeMedicos = new ArrayList<>();
            listaDeMedicos = DAOMedico.carregarCombo();
            jcbMedico.removeAllItems();
            jcbMedico.addItem("Selecione o médico");
            for (Medico m: listaDeMedicos) {
                jcbMedico.addItem(m.getNomeMedico());
            }
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbCancelar = new javax.swing.JButton();
        jlPaciente = new javax.swing.JLabel();
        jbEditar = new javax.swing.JButton();
        jcbPaciente = new javax.swing.JComboBox<>();
        jbExcluir = new javax.swing.JButton();
        jlMedico = new javax.swing.JLabel();
        jlPesquisar = new javax.swing.JLabel();
        jcbMedico = new javax.swing.JComboBox<>();
        jtfPesquisar = new javax.swing.JTextField();
        jlData = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtDados = new javax.swing.JTable();
        jftfData = new javax.swing.JFormattedTextField();
        jlHora = new javax.swing.JLabel();
        jftfHora = new javax.swing.JFormattedTextField();
        jbNovo = new javax.swing.JButton();
        jlId = new javax.swing.JLabel();
        jbSalvar = new javax.swing.JButton();
        jlValorId = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastro de Consultas");

        jbCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.setEnabled(false);
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jlPaciente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPaciente.setText("Paciente");

        jbEditar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbEditar.setText("Editar");
        jbEditar.setEnabled(false);
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jcbPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione o paciente", " " }));
        jcbPaciente.setEnabled(false);

        jbExcluir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jlMedico.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlMedico.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMedico.setText("Medico");

        jlPesquisar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlPesquisar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPesquisar.setText("Pesquisar");

        jcbMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione o médico" }));
        jcbMedico.setEnabled(false);

        jtfPesquisar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtfPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisarKeyReleased(evt);
            }
        });

        jlData.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlData.setText("Data");

        jtDados.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Paciente", "Medico", "Data", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtDados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtDados);

        try {
            jftfData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftfData.setEnabled(false);

        jlHora.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlHora.setText("Hora");

        try {
            jftfHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftfHora.setEnabled(false);

        jbNovo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jlId.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlId.setText("Id");

        jbSalvar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.setEnabled(false);
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jlValorId.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlValorId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlValorId.setText("0");
        jlValorId.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jlId, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(jlValorId, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jlPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(jcbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jlMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(jcbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jlData, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(jftfData, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jlHora, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(jftfHora, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(154, 154, 154)
                            .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jbCancelar)
                            .addGap(6, 6, 6)
                            .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jlPesquisar)
                            .addGap(45, 45, 45)
                            .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlId)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jlValorId, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jlPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jlMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlData, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlHora, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jftfHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbNovo)
                    .addComponent(jbSalvar)
                    .addComponent(jbCancelar)
                    .addComponent(jbEditar)
                    .addComponent(jbExcluir))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        jbNovo.setEnabled(false);
        jbSalvar.setEnabled(true);
        jbCancelar.setEnabled(true);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jcbPaciente.setEnabled(true);
        jcbMedico.setEnabled(true);
        jftfData.setEnabled(true);
        jftfHora.setEnabled(true);
        jtfPesquisar.setEnabled(false);
        jtDados.setEnabled(false);
        jcbPaciente.setSelectedIndex(0);
        jcbMedico.setSelectedIndex(0);
        jftfData.setText("");
        jftfHora.setText("");
        jtfPesquisar.setText("");
        acao = 1;
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        jbNovo.setEnabled(true);
        jbSalvar.setEnabled(false);
        jbCancelar.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jcbPaciente.setEnabled(false);
        jcbMedico.setEnabled(false);
        jftfData.setEnabled(false);
        jftfHora.setEnabled(false);
        jtfPesquisar.setEnabled(true);
        jtDados.setEnabled(false);
        jcbPaciente.setSelectedIndex(0);
        jcbMedico.setSelectedIndex(0);
        jftfData.setText("");
        jftfHora.setText("");
        jtfPesquisar.setText("");
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        try {
            if (validarCampos()) {
                if (preencherObjeto()) {
                    if (acao == 1) {
                        if (DAO.incluir(obj)) {
                            JOptionPane.showMessageDialog(this, "Salvo com sucesso!", "Meu sistema", JOptionPane.INFORMATION_MESSAGE);
                            jbCancelarActionPerformed(evt);
                        }
                        else {
                            JOptionPane.showMessageDialog(this, "Não foi possível salvar os dados!", "Meu sistema", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    if (acao == 2) {
                        if (DAO.editar(obj)) {
                            JOptionPane.showMessageDialog(this, "Atualizado com sucesso!", "Meu sistema", JOptionPane.INFORMATION_MESSAGE);
                            jbCancelarActionPerformed(evt);
                        }
                        else {
                            JOptionPane.showMessageDialog(this, "Não foi possível atualizar os dados!", "Meu sistema", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jtfPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisarKeyReleased
        try {
            DefaultTableModel mp = (DefaultTableModel) jtDados.getModel();
            mp.setNumRows(0);
            if (jtfPesquisar.getText().length() > 0) {
                listaDeConsultas = DAO.pesquisar(jtfPesquisar.getText());
                for (Consulta c: listaDeConsultas) {
                    mp.addRow(new String[]{"" + c.getIdConsulta(), "" + c.getPaciente().getNomePaciente(), "" + c.getMedico().getNomeMedico(), c.getDataConsulta(), c.getHoraConsulta()});
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jtfPesquisarKeyReleased

    private void jtDadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDadosMouseClicked
        try {
            int linhaSelecionada = jtDados.getSelectedRow();
            if (linhaSelecionada > -1) {
                jlValorId.setText("" + listaDeConsultas.get(linhaSelecionada).getIdConsulta());
                jcbPaciente.setSelectedItem(listaDeConsultas.get(linhaSelecionada).getPaciente().getNomePaciente());
                jcbMedico.setSelectedItem(listaDeConsultas.get(linhaSelecionada).getMedico().getNomeMedico());
                jftfData.setText(listaDeConsultas.get(linhaSelecionada).getDataConsulta());
                jftfHora.setText(listaDeConsultas.get(linhaSelecionada).getHoraConsulta());
                jbEditar.setEnabled(true);
                jbExcluir.setEnabled(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jtDadosMouseClicked

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        try {
            TratarFormularios.habilitarCampos(this);
        } catch (Exception ex) {
            Logger.getLogger(JIFConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        jbNovo.setEnabled(false);
        jbSalvar.setEnabled(true);
        jbCancelar.setEnabled(true);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        acao = 2;
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        try {
            if (DAO.excluir(Integer.parseInt(jlValorId.getText()))) {
                JOptionPane.showMessageDialog(this, "Excluído com sucesso", "Meu sistema", JOptionPane.INFORMATION_MESSAGE);
                jbEditar.setEnabled(false);
                jbExcluir.setEnabled(false);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbExcluirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox<String> jcbMedico;
    private javax.swing.JComboBox<String> jcbPaciente;
    private javax.swing.JFormattedTextField jftfData;
    private javax.swing.JFormattedTextField jftfHora;
    private javax.swing.JLabel jlData;
    private javax.swing.JLabel jlHora;
    private javax.swing.JLabel jlId;
    private javax.swing.JLabel jlMedico;
    private javax.swing.JLabel jlPaciente;
    private javax.swing.JLabel jlPesquisar;
    private javax.swing.JLabel jlValorId;
    private javax.swing.JTable jtDados;
    private javax.swing.JTextField jtfPesquisar;
    // End of variables declaration//GEN-END:variables
    
      
    private boolean validarCampos() {
        
        String msg = "";
        
        if (jcbPaciente.getSelectedIndex() == 0) {
            msg += "Selecione um paciente.";
        }
        
        if (jcbMedico.getSelectedIndex() == 0) {
            msg += "\nSelecione um médico.";
        }
        
        if (jftfData.getText().trim().length() != 10) {
            msg += "\nInforme a data corretamente.";
        }
        
        if (jftfHora.getText().trim().length() != 8) {
            msg += "\nInforme a hora corretamente.";
        }
        
        if (msg.length() == 0) {
            return true;
        }
        else {
            JOptionPane.showMessageDialog(this, "Corrija: \n" + msg, "Meu sistema", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    private boolean preencherObjeto() {
        
        obj.setIdConsulta(Integer.parseInt(jlValorId.getText()));
        obj.setPaciente(listaDePacientes.get(jcbPaciente.getSelectedIndex()-1));
        obj.setMedico(listaDeMedicos.get(jcbMedico.getSelectedIndex()-1));
        obj.setDataConsulta(jftfData.getText());
        obj.setHoraConsulta(jftfHora.getText());
        
        return true;
    }
    
}
